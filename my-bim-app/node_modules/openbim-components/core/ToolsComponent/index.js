import * as THREE from "three";
import ToolBufferReader from "top-tool-package-reader";
import * as OBC from "../../index";
import { Component } from "../../base-types";
/**
 * An object to easily handle all the tools used (e.g. updating them, retrieving
 * them, performing batch operations, etc). A tool is a feature that achieves
 * something through user interaction (e.g. clipping planes, dimensions, etc).
 */
export class ToolComponent extends Component {
    constructor() {
        super(...arguments);
        /** The list of components created in this app. */
        this.list = new Map();
        /** The auth token to get tools from That Open Platform. */
        this.token = "";
        /** {@link Component.uuid} */
        this.uuid = "ToolComponent";
        /** {@link Component.enabled} */
        this.enabled = true;
        this._reader = new ToolBufferReader();
        this._urls = {
            base: "https://api.platform.thatopen.com/v1/tools/",
            baseDev: "https://dev.api.dev.platform.thatopen.com/v1/tools/",
            path: "/download?accessToken=",
        };
    }
    /**
     * Adds a new tool. Use this in the constructor of your tools.
     *
     * @param uuid The UUID of your tool.
     * @param instance The instance of your tool (`this` inside the constructor).
     */
    add(uuid, instance) {
        if (!this.list.has(uuid)) {
            this.list.set(uuid, instance);
        }
    }
    /**
     * Retrieves a tool component. If it already exists in this app, it returns the instance of the component. If it
     * doesn't exist, it will instance it automatically.
     *
     * @param ToolClass - The component to get or create.
     */
    async get(ToolClass) {
        const id = ToolClass.uuid;
        if (!this.list.has(id)) {
            const isLibraryComponent = ToolComponent.libraryUUIDs.has(id);
            if (isLibraryComponent) {
                const newLibraryComponent = new ToolClass(this.components);
                this.list.set(id, newLibraryComponent);
                return newLibraryComponent;
            }
            return this.getPlatformComponent(id);
        }
        return this.list.get(id);
    }
    /**
     * Updates all the registered tool components. Only the components where the
     * property {@link Component.enabled} is true will be updated.
     * @param delta - The
     * [delta time](https://threejs.org/docs/#api/en/core/Clock) of the loop.
     */
    async update(delta) {
        const tools = this.list.values();
        for (const tool of tools) {
            if (tool.enabled && tool.isUpdateable()) {
                await tool.update(delta);
            }
        }
    }
    /**
     * Disposes all the MEMORY used by all the tools.
     */
    async dispose() {
        const tools = this.list.values();
        for (const tool of tools) {
            tool.enabled = false;
            if (tool.isDisposeable()) {
                await tool.dispose();
            }
        }
    }
    async getPlatformComponent(id) {
        const { base, baseDev, path } = this._urls;
        const currentUrl = window.location.href;
        const devPattern = /(https:\/\/qa.)|(localhost)/;
        const isDev = currentUrl.match(devPattern);
        const baseUrl = isDev ? baseDev : base;
        const url = baseUrl + id + path + this.token;
        const fetched = await fetch(url);
        const rawBuffer = await fetched.arrayBuffer();
        const buffer = new Uint8Array(rawBuffer);
        const code = this._reader.read(buffer);
        const script = document.createElement("script");
        script.textContent = code.js;
        document.body.appendChild(script);
        const win = window;
        if (!win.ThatOpenTool) {
            throw new Error(`There was a problem fetching the tool ${id}.`);
        }
        const ToolClass = win.ThatOpenTool(OBC, THREE);
        win.ThatOpenTool = undefined;
        script.remove();
        return new ToolClass(this.components);
    }
}
/** The list of UUIDs of all the components in this library. */
ToolComponent.libraryUUIDs = new Set();
//# sourceMappingURL=index.js.map